{
  "version": 3,
  "file": "sendcommand.js",
  "sourceRoot": "",
  "sources": [
    "sendcommand.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "`#!/usr/bin/env node\r\n\r\n'use strict'`\r\n\r\n# Command line tool for controlling (lock/unlock/open/toggle) eQ-3 eqiva Bluetooth smart locks\r\n\r\n# Import/Require the local \"cli\" module that provides some useful functions for CLI scripts\r\ncli = require('./cli')\r\n\r\n# Import/Require the \"keyble\" module that provides a library for the eQ-3 eqiva Bluetooth smart locks\r\nkeyble = require('./keyble')\r\n\r\n# The default auto-disconnect time, in seconds\r\ndefault_auto_disconnect_time = 30.0\r\n\r\n# The default status update time, in seconds\r\ndefault_status_update_time = 600.0\r\n\r\n# The default timeout time, in seconds\r\ndefault_timeout_time = 45.0\r\n\r\n# ----\r\n# MAIN\r\n# ----\r\n# Only execute the following code when run from the command line\r\nif (require.main is module)\r\n\t# Parse the command line arguments\r\n\targument_parser = new cli.ArgumentParser\r\n\t\tdescription: 'Control (lock/unlock/open/toggle) an eQ-3 eqiva Bluetooth smart lock.'\r\n\targument_parser.addArgument ['--address', '-a'],\r\n\t\trequired: true\r\n\t\ttype: 'string'\r\n\t\thelp: 'The smart lock\\'s MAC address'\r\n\targument_parser.addArgument ['--user_id', '-u'],\r\n\t\trequired: true\r\n\t\ttype: 'int'\r\n\t\thelp: 'The user ID'\r\n\targument_parser.addArgument ['--user_key', '-k'],\r\n\t\trequired: true\r\n\t\ttype: 'string'\r\n\t\thelp: 'The user key'\r\n\targument_parser.addArgument ['--auto_disconnect_time', '-adt'],\r\n\t\ttype: 'float'\r\n\t\tdefaultValue: default_auto_disconnect_time\r\n\t\thelp: \"The auto-disconnect time. If connected to the lock, the connection will be automatically disconnected after this many seconds of inactivity, in order to save battery. A value of 0 will deactivate auto-disconnect (default: #{default_auto_disconnect_time})\"\r\n\targument_parser.addArgument ['--status_update_time', '-sut'],\r\n\t\ttype: 'float'\r\n\t\tdefaultValue: default_status_update_time\r\n\t\thelp: \"The status update time. If no status information has been received for this many seconds, automatically connect to the lock and query the status. A value of 0 will deactivate status updates (default: #{default_status_update_time})\"\r\n\targument_parser.addArgument ['--timeout', '-t'],\r\n\t\ttype: 'float'\r\n\t\tdefaultValue: default_timeout_time\r\n\t\thelp: \"The timeout time. Commands must finish within this many seconds, otherwise there is an error. A value of 0 will deactivate timeouts (default: #{default_timeout_time})\"\r\n\targument_parser.addArgument ['--command', '-c'],\r\n\t\tchoices: ['lock', 'open', 'unlock', 'status', 'toggle']\r\n\t\trequired: false\r\n\t\ttype: 'string'\r\n\t\thelp: 'The command to perform. If not provided on the command line, the command(s) will be read as input lines from STDIN instead'\r\n\targs = argument_parser.parseArgs()\r\n\r\n\tkey_ble = new keyble.Key_Ble\r\n\t\taddress: args.address\r\n\t\tuser_id: args.user_id\r\n\t\tuser_key: args.user_key\r\n\t\tauto_disconnect_time: args.auto_disconnect_time\r\n\t\tstatus_update_time: args.status_update_time\r\n\tkey_ble.on 'status_change', (status_id, status_string) ->\r\n\t\tconsole.log status_string\r\n\tcli.process_input args.command, process.stdin, (command) ->\r\n\t\tkeyble.utils.time_limit((switch command\r\n\t\t\twhen 'lock' then key_ble.lock()\r\n\t\t\twhen 'unlock' then key_ble.unlock()\r\n\t\t\twhen 'open' then key_ble.open()\r\n\t\t\twhen 'status' then key_ble.request_status()\r\n\t\t\twhen 'toggle' then key_ble.request_status().then =>\r\n\t\t\t\tkey_ble.toggle()\r\n\t\t\telse Promise.reject(\"Unknown command \\\"#{command}\\\"\")\r\n\t\t), (args.timeout * 1000)).catch (error) ->\r\n\t\t\tconsole.error \"Error: #{error}\"\r\n\t.then ->\r\n\t\t# \"noble\", the Bluetooth library being used, does not properly shut down. An explicit process.exit() is required when finished\r\n\t\tcli.exit()\r\n"
  ]
}